// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents a chat session between a user and the AI assistant
model ChatSession {
  id        String   @id @default(uuid())
  title     String
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages     Message[]
  agentResults AgentResult[]
  generatedApp GeneratedApp?

  @@map("chat_sessions")
}

// Represents individual messages in a chat session
model Message {
  id        String   @id @default(uuid())
  role      Role     @default(USER)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessionId    String
  session      ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  agentResults AgentResult[]

  @@index([sessionId])
  @@map("messages")
}

// Represents the results from different AI agents
model AgentResult {
  id        String    @id @default(uuid())
  agentType AgentType
  input     Json // Input data provided to the agent
  output    Json // Output/result from the agent
  status    Status    @default(COMPLETED)
  error     String? // Error message if status is FAILED
  duration  Int // Processing time in milliseconds
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  messageId String
  message   Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([messageId])
  @@map("agent_results")
}

// Represents a generated Nflow application
model GeneratedApp {
  id         String   @id @default(uuid())
  nflowAppId String   @unique // ID of the app in Nflow platform
  appUrl     String // URL to access the app
  features   Json // Array of features implemented
  components Json // Array of components used
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sessionId String      @unique // One-to-one relation with ChatSession
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@map("generated_apps")
}

// Enum for message roles
enum Role {
  USER
  ASSISTANT
  SYSTEM
}

// Enum for agent types based on our multi-agent system
enum AgentType {
  INTENT_EXTRACTION
  COMPONENT_MAPPING
  API_GENERATOR
  VALIDATION
  APPLICATION_AGENT
  OBJECT_AGENT
  LAYOUT_AGENT
  FLOW_AGENT
  EXECUTION_AGENT
}

// Enum for agent execution status
enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
